
// Generated from /home/kevin/DATA/Programmation/FIL/Filc/src/antlr/FilLexer.g4 by ANTLR 4.11.1


#include "FilLexer.h"


using namespace antlr4;

using namespace antlrcppfil;


using namespace antlr4;

namespace {

struct FilLexerStaticData final {
  FilLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  FilLexerStaticData(const FilLexerStaticData&) = delete;
  FilLexerStaticData(FilLexerStaticData&&) = delete;
  FilLexerStaticData& operator=(const FilLexerStaticData&) = delete;
  FilLexerStaticData& operator=(FilLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag fillexerLexerOnceFlag;
FilLexerStaticData *fillexerLexerStaticData = nullptr;

void fillexerLexerInitialize() {
  assert(fillexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<FilLexerStaticData>(
    std::vector<std::string>{
      "EXPORT", "FUN", "INTERFACE", "CLASS", "ABSTRACT", "OVERRIDE", "OPEN", 
      "PRIVATE", "PUBLIC", "INTERNAL", "PROTECTED", "CONSTRUCTOR", "ENUM", 
      "IF", "ELSE", "SWITCH", "DEFAULT", "FOR", "VAL", "VAR", "WHILE", "TRY", 
      "CATCH", "TRUE", "FALSE", "NULL_", "NEW", "OPERATOR", "LETTER", "DIGIT", 
      "IDENTIFIER", "DOT", "ARROW", "LBRACE", "RBRACE", "LPAREN", "RPAREN", 
      "LBRAK", "RBRAK", "COLON", "COMMA", "SEMICOLON", "EQ", "PLUS", "MINUS", 
      "DIVIDE", "TIMES", "MOD", "FLEFT", "FRIGHT", "AND", "OR", "LT", "GT", 
      "EQEQ", "LEQ", "GEQ", "NEQ", "NOT", "BAND", "BOR", "BXOR", "INT", 
      "FLOAT", "STRING_CHAR", "STRING", "FSTRING", "CHAR", "COMMENT", "COMMENT_BLOCK", 
      "SEPARATOR", "MODULE_NAME", "MODULE", "IMPORT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'export'", "'fun'", "'interface'", "'class'", "'abstract'", "'override'", 
      "'open'", "'private'", "'public'", "'internal'", "'protected'", "'constructor'", 
      "'enum'", "'if'", "'else'", "'switch'", "'default'", "'for'", "'val'", 
      "'var'", "'while'", "'try'", "'catch'", "'true'", "'false'", "'null'", 
      "'new'", "'operator'", "", "'.'", "'->'", "'{'", "'}'", "'('", "')'", 
      "'['", "']'", "':'", "','", "';'", "'='", "'+'", "'-'", "'/'", "'*'", 
      "'%'", "'<<'", "'>>'", "'&&'", "'||'", "'<'", "'>'", "'=='", "'<='", 
      "'>='", "'!='", "'!'", "'&'", "'|'", "'^'"
    },
    std::vector<std::string>{
      "", "EXPORT", "FUN", "INTERFACE", "CLASS", "ABSTRACT", "OVERRIDE", 
      "OPEN", "PRIVATE", "PUBLIC", "INTERNAL", "PROTECTED", "CONSTRUCTOR", 
      "ENUM", "IF", "ELSE", "SWITCH", "DEFAULT", "FOR", "VAL", "VAR", "WHILE", 
      "TRY", "CATCH", "TRUE", "FALSE", "NULL_", "NEW", "OPERATOR", "IDENTIFIER", 
      "DOT", "ARROW", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRAK", "RBRAK", 
      "COLON", "COMMA", "SEMICOLON", "EQ", "PLUS", "MINUS", "DIVIDE", "TIMES", 
      "MOD", "FLEFT", "FRIGHT", "AND", "OR", "LT", "GT", "EQEQ", "LEQ", 
      "GEQ", "NEQ", "NOT", "BAND", "BOR", "BXOR", "INT", "FLOAT", "STRING", 
      "FSTRING", "CHAR", "COMMENT", "COMMENT_BLOCK", "SEPARATOR", "MODULE", 
      "IMPORT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,70,535,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
  	6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
  	1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,
  	1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
  	5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
  	1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,
  	10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
  	11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,14,1,
  	14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,
  	16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,
  	19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,22,1,
  	22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
  	24,1,24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,
  	27,1,27,1,27,1,27,1,27,1,27,1,28,3,28,332,8,28,1,29,1,29,1,30,1,30,1,
  	30,5,30,339,8,30,10,30,12,30,342,9,30,1,31,1,31,1,32,1,32,1,32,1,33,1,
  	33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,
  	40,1,41,1,41,1,42,1,42,1,43,1,43,1,44,1,44,1,45,1,45,1,46,1,46,1,47,1,
  	47,1,48,1,48,1,48,1,49,1,49,1,49,1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,
  	52,1,53,1,53,1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,
  	57,1,58,1,58,1,59,1,59,1,60,1,60,1,61,1,61,1,62,4,62,416,8,62,11,62,12,
  	62,417,1,63,5,63,421,8,63,10,63,12,63,424,9,63,1,63,1,63,4,63,428,8,63,
  	11,63,12,63,429,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,65,5,65,440,8,65,
  	10,65,12,65,443,9,65,1,65,1,65,1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
  	1,66,5,66,456,8,66,10,66,12,66,459,9,66,1,66,1,66,1,66,1,67,1,67,1,67,
  	1,67,1,68,1,68,1,68,1,68,5,68,472,8,68,10,68,12,68,475,9,68,1,68,1,68,
  	1,69,1,69,1,69,1,69,5,69,483,8,69,10,69,12,69,486,9,69,1,69,1,69,1,69,
  	1,69,1,69,1,70,3,70,494,8,70,1,70,1,70,1,71,1,71,1,71,5,71,501,8,71,10,
  	71,12,71,504,9,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,5,72,514,8,
  	72,10,72,12,72,517,9,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
  	1,73,5,73,529,8,73,10,73,12,73,532,9,73,1,73,1,73,1,484,0,74,1,1,3,2,
  	5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
  	16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
  	55,28,57,0,59,0,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,
  	79,38,81,39,83,40,85,41,87,42,89,43,91,44,93,45,95,46,97,47,99,48,101,
  	49,103,50,105,51,107,52,109,53,111,54,113,55,115,56,117,57,119,58,121,
  	59,123,60,125,61,127,62,129,0,131,63,133,64,135,65,137,66,139,67,141,
  	68,143,0,145,69,147,70,1,0,5,3,0,65,90,95,95,97,122,3,0,10,10,34,34,92,
  	92,3,0,10,10,39,39,92,92,2,0,10,10,13,13,3,1,9,10,13,13,32,32,546,0,1,
  	1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
  	0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,
  	1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
  	0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
  	0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,
  	1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
  	0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
  	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
  	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
  	0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,
  	0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
  	0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,131,1,0,0,0,0,133,1,0,
  	0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,0,0,0,145,1,0,
  	0,0,0,147,1,0,0,0,1,149,1,0,0,0,3,156,1,0,0,0,5,160,1,0,0,0,7,170,1,0,
  	0,0,9,176,1,0,0,0,11,185,1,0,0,0,13,194,1,0,0,0,15,199,1,0,0,0,17,207,
  	1,0,0,0,19,214,1,0,0,0,21,223,1,0,0,0,23,233,1,0,0,0,25,245,1,0,0,0,27,
  	250,1,0,0,0,29,253,1,0,0,0,31,258,1,0,0,0,33,265,1,0,0,0,35,273,1,0,0,
  	0,37,277,1,0,0,0,39,281,1,0,0,0,41,285,1,0,0,0,43,291,1,0,0,0,45,295,
  	1,0,0,0,47,301,1,0,0,0,49,306,1,0,0,0,51,312,1,0,0,0,53,317,1,0,0,0,55,
  	321,1,0,0,0,57,331,1,0,0,0,59,333,1,0,0,0,61,335,1,0,0,0,63,343,1,0,0,
  	0,65,345,1,0,0,0,67,348,1,0,0,0,69,350,1,0,0,0,71,352,1,0,0,0,73,354,
  	1,0,0,0,75,356,1,0,0,0,77,358,1,0,0,0,79,360,1,0,0,0,81,362,1,0,0,0,83,
  	364,1,0,0,0,85,366,1,0,0,0,87,368,1,0,0,0,89,370,1,0,0,0,91,372,1,0,0,
  	0,93,374,1,0,0,0,95,376,1,0,0,0,97,378,1,0,0,0,99,381,1,0,0,0,101,384,
  	1,0,0,0,103,387,1,0,0,0,105,390,1,0,0,0,107,392,1,0,0,0,109,394,1,0,0,
  	0,111,397,1,0,0,0,113,400,1,0,0,0,115,403,1,0,0,0,117,406,1,0,0,0,119,
  	408,1,0,0,0,121,410,1,0,0,0,123,412,1,0,0,0,125,415,1,0,0,0,127,422,1,
  	0,0,0,129,431,1,0,0,0,131,433,1,0,0,0,133,447,1,0,0,0,135,463,1,0,0,0,
  	137,467,1,0,0,0,139,478,1,0,0,0,141,493,1,0,0,0,143,497,1,0,0,0,145,505,
  	1,0,0,0,147,520,1,0,0,0,149,150,5,101,0,0,150,151,5,120,0,0,151,152,5,
  	112,0,0,152,153,5,111,0,0,153,154,5,114,0,0,154,155,5,116,0,0,155,2,1,
  	0,0,0,156,157,5,102,0,0,157,158,5,117,0,0,158,159,5,110,0,0,159,4,1,0,
  	0,0,160,161,5,105,0,0,161,162,5,110,0,0,162,163,5,116,0,0,163,164,5,101,
  	0,0,164,165,5,114,0,0,165,166,5,102,0,0,166,167,5,97,0,0,167,168,5,99,
  	0,0,168,169,5,101,0,0,169,6,1,0,0,0,170,171,5,99,0,0,171,172,5,108,0,
  	0,172,173,5,97,0,0,173,174,5,115,0,0,174,175,5,115,0,0,175,8,1,0,0,0,
  	176,177,5,97,0,0,177,178,5,98,0,0,178,179,5,115,0,0,179,180,5,116,0,0,
  	180,181,5,114,0,0,181,182,5,97,0,0,182,183,5,99,0,0,183,184,5,116,0,0,
  	184,10,1,0,0,0,185,186,5,111,0,0,186,187,5,118,0,0,187,188,5,101,0,0,
  	188,189,5,114,0,0,189,190,5,114,0,0,190,191,5,105,0,0,191,192,5,100,0,
  	0,192,193,5,101,0,0,193,12,1,0,0,0,194,195,5,111,0,0,195,196,5,112,0,
  	0,196,197,5,101,0,0,197,198,5,110,0,0,198,14,1,0,0,0,199,200,5,112,0,
  	0,200,201,5,114,0,0,201,202,5,105,0,0,202,203,5,118,0,0,203,204,5,97,
  	0,0,204,205,5,116,0,0,205,206,5,101,0,0,206,16,1,0,0,0,207,208,5,112,
  	0,0,208,209,5,117,0,0,209,210,5,98,0,0,210,211,5,108,0,0,211,212,5,105,
  	0,0,212,213,5,99,0,0,213,18,1,0,0,0,214,215,5,105,0,0,215,216,5,110,0,
  	0,216,217,5,116,0,0,217,218,5,101,0,0,218,219,5,114,0,0,219,220,5,110,
  	0,0,220,221,5,97,0,0,221,222,5,108,0,0,222,20,1,0,0,0,223,224,5,112,0,
  	0,224,225,5,114,0,0,225,226,5,111,0,0,226,227,5,116,0,0,227,228,5,101,
  	0,0,228,229,5,99,0,0,229,230,5,116,0,0,230,231,5,101,0,0,231,232,5,100,
  	0,0,232,22,1,0,0,0,233,234,5,99,0,0,234,235,5,111,0,0,235,236,5,110,0,
  	0,236,237,5,115,0,0,237,238,5,116,0,0,238,239,5,114,0,0,239,240,5,117,
  	0,0,240,241,5,99,0,0,241,242,5,116,0,0,242,243,5,111,0,0,243,244,5,114,
  	0,0,244,24,1,0,0,0,245,246,5,101,0,0,246,247,5,110,0,0,247,248,5,117,
  	0,0,248,249,5,109,0,0,249,26,1,0,0,0,250,251,5,105,0,0,251,252,5,102,
  	0,0,252,28,1,0,0,0,253,254,5,101,0,0,254,255,5,108,0,0,255,256,5,115,
  	0,0,256,257,5,101,0,0,257,30,1,0,0,0,258,259,5,115,0,0,259,260,5,119,
  	0,0,260,261,5,105,0,0,261,262,5,116,0,0,262,263,5,99,0,0,263,264,5,104,
  	0,0,264,32,1,0,0,0,265,266,5,100,0,0,266,267,5,101,0,0,267,268,5,102,
  	0,0,268,269,5,97,0,0,269,270,5,117,0,0,270,271,5,108,0,0,271,272,5,116,
  	0,0,272,34,1,0,0,0,273,274,5,102,0,0,274,275,5,111,0,0,275,276,5,114,
  	0,0,276,36,1,0,0,0,277,278,5,118,0,0,278,279,5,97,0,0,279,280,5,108,0,
  	0,280,38,1,0,0,0,281,282,5,118,0,0,282,283,5,97,0,0,283,284,5,114,0,0,
  	284,40,1,0,0,0,285,286,5,119,0,0,286,287,5,104,0,0,287,288,5,105,0,0,
  	288,289,5,108,0,0,289,290,5,101,0,0,290,42,1,0,0,0,291,292,5,116,0,0,
  	292,293,5,114,0,0,293,294,5,121,0,0,294,44,1,0,0,0,295,296,5,99,0,0,296,
  	297,5,97,0,0,297,298,5,116,0,0,298,299,5,99,0,0,299,300,5,104,0,0,300,
  	46,1,0,0,0,301,302,5,116,0,0,302,303,5,114,0,0,303,304,5,117,0,0,304,
  	305,5,101,0,0,305,48,1,0,0,0,306,307,5,102,0,0,307,308,5,97,0,0,308,309,
  	5,108,0,0,309,310,5,115,0,0,310,311,5,101,0,0,311,50,1,0,0,0,312,313,
  	5,110,0,0,313,314,5,117,0,0,314,315,5,108,0,0,315,316,5,108,0,0,316,52,
  	1,0,0,0,317,318,5,110,0,0,318,319,5,101,0,0,319,320,5,119,0,0,320,54,
  	1,0,0,0,321,322,5,111,0,0,322,323,5,112,0,0,323,324,5,101,0,0,324,325,
  	5,114,0,0,325,326,5,97,0,0,326,327,5,116,0,0,327,328,5,111,0,0,328,329,
  	5,114,0,0,329,56,1,0,0,0,330,332,7,0,0,0,331,330,1,0,0,0,332,58,1,0,0,
  	0,333,334,2,48,57,0,334,60,1,0,0,0,335,340,3,57,28,0,336,339,3,57,28,
  	0,337,339,3,59,29,0,338,336,1,0,0,0,338,337,1,0,0,0,339,342,1,0,0,0,340,
  	338,1,0,0,0,340,341,1,0,0,0,341,62,1,0,0,0,342,340,1,0,0,0,343,344,5,
  	46,0,0,344,64,1,0,0,0,345,346,5,45,0,0,346,347,5,62,0,0,347,66,1,0,0,
  	0,348,349,5,123,0,0,349,68,1,0,0,0,350,351,5,125,0,0,351,70,1,0,0,0,352,
  	353,5,40,0,0,353,72,1,0,0,0,354,355,5,41,0,0,355,74,1,0,0,0,356,357,5,
  	91,0,0,357,76,1,0,0,0,358,359,5,93,0,0,359,78,1,0,0,0,360,361,5,58,0,
  	0,361,80,1,0,0,0,362,363,5,44,0,0,363,82,1,0,0,0,364,365,5,59,0,0,365,
  	84,1,0,0,0,366,367,5,61,0,0,367,86,1,0,0,0,368,369,5,43,0,0,369,88,1,
  	0,0,0,370,371,5,45,0,0,371,90,1,0,0,0,372,373,5,47,0,0,373,92,1,0,0,0,
  	374,375,5,42,0,0,375,94,1,0,0,0,376,377,5,37,0,0,377,96,1,0,0,0,378,379,
  	5,60,0,0,379,380,5,60,0,0,380,98,1,0,0,0,381,382,5,62,0,0,382,383,5,62,
  	0,0,383,100,1,0,0,0,384,385,5,38,0,0,385,386,5,38,0,0,386,102,1,0,0,0,
  	387,388,5,124,0,0,388,389,5,124,0,0,389,104,1,0,0,0,390,391,5,60,0,0,
  	391,106,1,0,0,0,392,393,5,62,0,0,393,108,1,0,0,0,394,395,5,61,0,0,395,
  	396,5,61,0,0,396,110,1,0,0,0,397,398,5,60,0,0,398,399,5,61,0,0,399,112,
  	1,0,0,0,400,401,5,62,0,0,401,402,5,61,0,0,402,114,1,0,0,0,403,404,5,33,
  	0,0,404,405,5,61,0,0,405,116,1,0,0,0,406,407,5,33,0,0,407,118,1,0,0,0,
  	408,409,5,38,0,0,409,120,1,0,0,0,410,411,5,124,0,0,411,122,1,0,0,0,412,
  	413,5,94,0,0,413,124,1,0,0,0,414,416,3,59,29,0,415,414,1,0,0,0,416,417,
  	1,0,0,0,417,415,1,0,0,0,417,418,1,0,0,0,418,126,1,0,0,0,419,421,3,59,
  	29,0,420,419,1,0,0,0,421,424,1,0,0,0,422,420,1,0,0,0,422,423,1,0,0,0,
  	423,425,1,0,0,0,424,422,1,0,0,0,425,427,5,46,0,0,426,428,3,59,29,0,427,
  	426,1,0,0,0,428,429,1,0,0,0,429,427,1,0,0,0,429,430,1,0,0,0,430,128,1,
  	0,0,0,431,432,8,1,0,0,432,130,1,0,0,0,433,441,5,34,0,0,434,440,3,129,
  	64,0,435,436,5,92,0,0,436,440,5,34,0,0,437,438,5,92,0,0,438,440,5,92,
  	0,0,439,434,1,0,0,0,439,435,1,0,0,0,439,437,1,0,0,0,440,443,1,0,0,0,441,
  	439,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,441,1,0,0,0,444,445,5,
  	34,0,0,445,446,6,65,0,0,446,132,1,0,0,0,447,448,5,102,0,0,448,449,5,34,
  	0,0,449,457,1,0,0,0,450,456,3,129,64,0,451,452,5,92,0,0,452,456,5,34,
  	0,0,453,454,5,92,0,0,454,456,5,92,0,0,455,450,1,0,0,0,455,451,1,0,0,0,
  	455,453,1,0,0,0,456,459,1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,
  	1,0,0,0,459,457,1,0,0,0,460,461,5,34,0,0,461,462,6,66,1,0,462,134,1,0,
  	0,0,463,464,5,39,0,0,464,465,8,2,0,0,465,466,5,39,0,0,466,136,1,0,0,0,
  	467,468,5,47,0,0,468,469,5,47,0,0,469,473,1,0,0,0,470,472,8,3,0,0,471,
  	470,1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,1,
  	0,0,0,475,473,1,0,0,0,476,477,6,68,2,0,477,138,1,0,0,0,478,479,5,47,0,
  	0,479,480,5,42,0,0,480,484,1,0,0,0,481,483,9,0,0,0,482,481,1,0,0,0,483,
  	486,1,0,0,0,484,485,1,0,0,0,484,482,1,0,0,0,485,487,1,0,0,0,486,484,1,
  	0,0,0,487,488,5,42,0,0,488,489,5,47,0,0,489,490,1,0,0,0,490,491,6,69,
  	2,0,491,140,1,0,0,0,492,494,7,4,0,0,493,492,1,0,0,0,494,495,1,0,0,0,495,
  	496,6,70,2,0,496,142,1,0,0,0,497,502,3,61,30,0,498,499,5,46,0,0,499,501,
  	3,61,30,0,500,498,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,1,0,
  	0,0,503,144,1,0,0,0,504,502,1,0,0,0,505,506,5,109,0,0,506,507,5,111,0,
  	0,507,508,5,100,0,0,508,509,5,117,0,0,509,510,5,108,0,0,510,511,5,101,
  	0,0,511,515,1,0,0,0,512,514,5,32,0,0,513,512,1,0,0,0,514,517,1,0,0,0,
  	515,513,1,0,0,0,515,516,1,0,0,0,516,518,1,0,0,0,517,515,1,0,0,0,518,519,
  	3,143,71,0,519,146,1,0,0,0,520,521,5,105,0,0,521,522,5,109,0,0,522,523,
  	5,112,0,0,523,524,5,111,0,0,524,525,5,114,0,0,525,526,5,116,0,0,526,530,
  	1,0,0,0,527,529,5,32,0,0,528,527,1,0,0,0,529,532,1,0,0,0,530,528,1,0,
  	0,0,530,531,1,0,0,0,531,533,1,0,0,0,532,530,1,0,0,0,533,534,3,143,71,
  	0,534,148,1,0,0,0,17,0,331,338,340,417,422,429,439,441,455,457,473,484,
  	493,502,515,530,3,1,65,0,1,66,1,6,0,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  fillexerLexerStaticData = staticData.release();
}

}

FilLexer::FilLexer(CharStream *input) : Lexer(input) {
  FilLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *fillexerLexerStaticData->atn, fillexerLexerStaticData->decisionToDFA, fillexerLexerStaticData->sharedContextCache);
}

FilLexer::~FilLexer() {
  delete _interpreter;
}

std::string FilLexer::getGrammarFileName() const {
  return "FilLexer.g4";
}

const std::vector<std::string>& FilLexer::getRuleNames() const {
  return fillexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& FilLexer::getChannelNames() const {
  return fillexerLexerStaticData->channelNames;
}

const std::vector<std::string>& FilLexer::getModeNames() const {
  return fillexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& FilLexer::getVocabulary() const {
  return fillexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView FilLexer::getSerializedATN() const {
  return fillexerLexerStaticData->serializedATN;
}

const atn::ATN& FilLexer::getATN() const {
  return *fillexerLexerStaticData->atn;
}


void FilLexer::action(RuleContext *context, size_t ruleIndex, size_t actionIndex) {
  switch (ruleIndex) {
    case 65: STRINGAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;
    case 66: FSTRINGAction(antlrcpp::downCast<antlr4::RuleContext *>(context), actionIndex); break;

  default:
    break;
  }
}

void FilLexer::STRINGAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 0: 
            {
                auto text = getText();
                text = text.substr(1, text.size() - 2);
                setText(text);
            }
     break;

  default:
    break;
  }
}

void FilLexer::FSTRINGAction(antlr4::RuleContext *context, size_t actionIndex) {
  switch (actionIndex) {
    case 1: 
            {
                auto text = getText();
                text = text.substr(1, text.size() - 2);
                setText(text);
            }
     break;

  default:
    break;
  }
}



void FilLexer::initialize() {
  ::antlr4::internal::call_once(fillexerLexerOnceFlag, fillexerLexerInitialize);
}
